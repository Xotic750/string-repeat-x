{"version":3,"sources":["../src/string-repeat-x.js"],"names":[],"mappings":";;;;AAAA,OAAO,cAAP,MAA2B,aAA3B;AACA,OAAO,SAAP,MAAsB,cAAtB;AACA,OAAO,sBAAP,MAAmC,4BAAnC;AACA,OAAO,KAAP,MAAkB,aAAlB;AACA,OAAO,OAAP,MAAoB,WAApB;AAEA,IAAM,YAAY,GAAG,EAArB;IACe,Y,GAAgB,Y,CAAxB,M;AACP,IAAM,SAAS,GAAG,OAAO,CAAC;AAAA;;AAAA,SAAM,YAAY,CAAC,IAAb,CAAkB,GAAlB,EAAuB,CAAvB,CAAN;AAAA,CAAD,YAAP,CAAyC,KAAzC,KAAmD,OAArE;AAEA;;;;;;;;AAOA,IAAI,OAAJ;;AAEA,IAAI,SAAJ,EAAe;AACb,EAAA,OAAO,GAAG,SAAS,MAAT,CAAgB,KAAhB,EAAuB,KAAvB,EAA8B;AACtC,WAAO,YAAY,CAAC,IAAb,CAAkB,sBAAsB,CAAC,KAAD,CAAxC,EAAiD,KAAjD,KAA2D,YAAlE;AACD,GAFD;AAGD,CAJD,MAIO;AACL,EAAA,OAAO,GAAG,SAAS,MAAT,CAAgB,KAAhB,EAAuB,KAAvB,EAA8B;AACtC,QAAI,MAAM,GAAG,KAAK,CAAC,sBAAsB,CAAC,KAAD,CAAvB,CAAlB;AACA,QAAI,CAAC,GAAG,SAAS,CAAC,KAAD,CAAjB,CAFsC,CAItC;;AACA,QAAI,CAAC,GAAG,CAAJ,IAAS,CAAC,cAAc,CAAC,CAAD,CAA5B,EAAiC;AAC/B,YAAM,IAAI,UAAJ,CAAe,qBAAf,CAAN;AACD;;AAED,QAAI,MAAM,GAAG,YAAb;;AACA,WAAO,CAAP,EAAU;AACR,UAAI,CAAC,GAAG,CAAJ,KAAU,CAAd,EAAiB;AACf,QAAA,MAAM,IAAI,MAAV;AACD;;AAED,UAAI,CAAC,GAAG,CAAR,EAAW;AACT,QAAA,MAAM,IAAI,MAAV;AACD;AAED;;;AACA,MAAA,CAAC,KAAK,CAAN;AACD;;AAED,WAAO,MAAP;AACD,GAxBD;AAyBD;;AAED,IAAM,CAAC,GAAG,OAAV;AAEA,eAAe,CAAf","file":"string-repeat-x.esm.js","sourcesContent":["import numberIsFinite from 'is-finite-x';\nimport toInteger from 'to-integer-x';\nimport requireObjectCoercible from 'require-object-coercible-x';\nimport toStr from 'to-string-x';\nimport attempt from 'attempt-x';\n\nconst EMPTY_STRING = '';\nconst {repeat: nativeRepeat} = EMPTY_STRING;\nconst hasNative = attempt(() => nativeRepeat.call('a', 5)).value === 'aaaaa';\n\n/**\n * Repeat the given string the specified number of times.\n *\n * @param {string} value - The string to repeat.\n * @param {(number|string)} count - The number of times to repeat the string.\n * @returns {string} Repeated string.\n */\nlet $repeat;\n\nif (hasNative) {\n  $repeat = function repeat(value, count) {\n    return nativeRepeat.call(requireObjectCoercible(value), count) || EMPTY_STRING;\n  };\n} else {\n  $repeat = function repeat(value, count) {\n    let string = toStr(requireObjectCoercible(value));\n    let n = toInteger(count);\n\n    // Account for out-of-bounds indices\n    if (n < 0 || !numberIsFinite(n)) {\n      throw new RangeError('Invalid count value');\n    }\n\n    let result = EMPTY_STRING;\n    while (n) {\n      if (n % 2 === 1) {\n        result += string;\n      }\n\n      if (n > 1) {\n        string += string;\n      }\n\n      /* eslint-disable-next-line no-bitwise */\n      n >>= 1;\n    }\n\n    return result;\n  };\n}\n\nconst r = $repeat;\n\nexport default r;\n"]}